name: Build & Publish

on:
  pull_request:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  conan-build:
    name: Conan build on ${{ matrix.os_arch[0] }}-${{ matrix.os_arch[1] }}
    runs-on: ${{ matrix.os_arch[0] }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os_arch:
          - [ubuntu-latest, manylinux_x86_64]
          # - [windows-latest, win_amd64]
          # - [macos-13, macosx_x86_64] # macos-13 is the last x86-64 runner
          # - [macos-latest, macosx_arm64] # macos-latest is always arm64 going forward

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use gcc-14
        if: ${{ contains(runner.os, 'macos') }}
        run: |
          {
            echo "CC=gcc-14"
            echo "CXX=g++-14"
            echo "LD=ld"
            echo "AR=gcc-ar-14"
            echo "RANLIB=gcc-ranlib-14"
            echo "MACOSX_DEPLOYMENT_TARGET=14.0"
          } >> "$GITHUB_ENV"

      - name: install conan
        run: python -m pip install conan

      - name: compile boost
        run: |
          conan profile detect -e
          conan install . -s compiler.cppstd=20 --build=missing

      - name: save conan boost cache
        run: |
          conan cache clean "*"
          conan cache save "boost/*:*"

      - uses: actions/upload-artifact@v4
        with:
          name: conan-build-${{ matrix.os_arch[0] }}-${{ matrix.os_arch[1] }}
          path: conan_cache_save.tgz

  build:
    name: Python ${{ matrix.python[0] }} on ${{ matrix.os_arch[0] }}-${{ matrix.os_arch[1] }}
    runs-on: ${{ matrix.os_arch[0] }}
    timeout-minutes: 15
    needs: conan-build
    strategy:
      fail-fast: false
      matrix:
        python:
          - ["3.9", cp39]
          - ["3.10", cp310]
          - ["3.11", cp311]
          - ["3.12", cp312]
        os_arch:
          - [ubuntu-latest, manylinux_x86_64]
          # - [windows-latest, win_amd64]
          # - [macos-13, macosx_x86_64] # macos-13 is the last x86-64 runner
          # - [macos-latest, macosx_arm64] # macos-latest is always arm64 going forward
    env:
      CIBW_BUILD: ${{ matrix.python[1] }}-${{ matrix.os_arch[1] }}
      CIBW_ENVIRONMENT: "CMAKE_POLICY_VERSION_MINIMUM=3.5" # Needed for build of quicklibcpp

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python[0] }}

      - uses: actions/download-artifact@v4
        with:
          name: conan-build-${{ matrix.os_arch[0] }}-${{ matrix.os_arch[1] }}

      - name: Use gcc-14
        if: ${{ contains(runner.os, 'macos') }}
        run: |
          {
            echo "CC=gcc-14"
            echo "CXX=g++-14"
            echo "LD=ld"
            echo "AR=gcc-ar-14"
            echo "RANLIB=gcc-ranlib-14"
            echo "MACOSX_DEPLOYMENT_TARGET=14.0"
          } >> "$GITHUB_ENV"

      - name: Support macos-13 for x86_64
        if: ${{ matrix.os_arch[1] == 'macosx_x86_64'}}
        run: echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> "$GITHUB_ENV"

      - name: Restore conan cache
        run: |
          python -m pip install conan
          conan profile detect -e
          conan cache restore conan_cache_save.tgz

      - name: Install cibuildwheel
        run: python -m pip install -U pip wheel cibuildwheel twine

      - name: Run cibuildwheel
        run: cibuildwheel --output-dir wheelhouse

      - name: Check metadata
        run: twine check wheelhouse/*

      - uses: actions/upload-artifact@v4
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          name: cibw-${{ env.CIBW_BUILD }}
          path: wheelhouse/*.whl

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: wheelhouse
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: wheelhouse
          verbose: true
